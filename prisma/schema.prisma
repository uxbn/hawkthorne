// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model DiscordChannel {
  id Int @default(autoincrement()) @id
  discordId String @unique // The ID of this channel from Discord.
  // The source of this channel if it came from a guild.
  guild DiscordGuild? @relation(fields: [guildId], references: [id])
  guildId Int?
  // The source of this channel if it came from a user.
  user User? @relation(fields: [userId], references: [id])
  userId Int?
  messages DiscordMessage[]
}

model DiscordGuild {
  id Int @default(autoincrement()) @id
  discordId String @unique // The ID of this guild from Discord.
  channels DiscordChannel[]
  scheduleChannels ScheduleChannel[]
}

model DiscordMessage {
  id Int @default(autoincrement()) @id
  channelId Int
  channel DiscordChannel @relation(fields: [channelId], references: [id])
  discordId String @unique // The ID of this message from Discord.
  // The event shown in this message, if any.
  event Event? @relation(fields: [eventId], references: [id])
  eventId Int?
}

model Event {
  id Int @default(autoincrement()) @id
  startDate DateTime @default(now())
  timeZoneOffset Float @default(0)
  timeZone String @default("GMT")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy User @relation(fields: [createdById], references: [id])
  createdById Int
  title String
  description String?
  registrations Registration[]
  maxPlayers Int?
  activityId String?  // The initial source of this event, null if custom.
  messages DiscordMessage[]
  scheduleMessages ScheduleMessage[]
  // TODO: Add color
}

model Registration {
  id Int @default(autoincrement()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId Int
  event Event @relation(fields: [eventId], references: [id])
  eventId Int
  registrationType Int  // enum RegistrationType
}

// Represents a Discord channel which is used to display the events of a guild with filtering.
model ScheduleChannel {
  id Int @default(autoincrement()) @id
  guild DiscordGuild @relation(fields: [guildId], references: [id])
  guildId Int
  activityCategoryFilter Int?  // enum ActivityCategory, null if all events should be shown
  scheduleMessages ScheduleMessage[]
}

// Represents a message in a ScheduleChannel.
model ScheduleMessage {
  id Int @default(autoincrement()) @id
  discordMessage DiscordMessage @relation(fields: [discordMessageId], references: [id])
  discordMessageId Int 
  channel ScheduleChannel @relation(fields: [channelId], references: [id])
  channelId Int
  event Event @relation(fields: [eventId], references: [id])
  eventId Int
}

model User {
  id Int @default(autoincrement()) @id
  discordId String @unique
  displayName String
  registrations Registration[]
}
